/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.market.citymarket.api;

import com.market.citymarket.api.model.Cart;
import com.market.citymarket.api.model.Item;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Cart", description = "Everything about cart")
public interface CartApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/carts/{customerId}/items : Adds an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or
     * increment quantity by the specified number of items if it does.
     *
     * @param customerId Customer Identifier (required)
     * @param item       Item object (optional)
     * @return Item added successfully (status code 201)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "addCartItemsByCustomerId", summary = "Adds an item in shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Item added successfully", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = Item.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
            })
    @RequestMapping(method = RequestMethod.POST, value = "/api/v1/carts/{customerId}/items", produces = {
            "application/xml", "application/json" }, consumes = { "application/xml", "application/json" })
    default ResponseEntity<List<Item>> addCartItemsByCustomerId(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId,
            @Parameter(name = "Item", description = "Item object") @Valid @RequestBody(required = false) Item item)
            throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /api/v1/carts/{customerId}/items : Replace/add an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or replace
     * with given item if it does.
     *
     * @param customerId Customer Identifier (required)
     * @param item       Item object (optional)
     * @return Item added successfully (status code 201)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "addOrReplaceItemsByCustomerId", summary = "Replace/add an item in shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Item added successfully", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = Item.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
            })
    @RequestMapping(method = RequestMethod.PUT, value = "/api/v1/carts/{customerId}/items", produces = {
            "application/xml", "application/json" }, consumes = { "application/xml", "application/json" })
    default ResponseEntity<List<Item>> addOrReplaceItemsByCustomerId(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId,
            @Parameter(name = "Item", description = "Item object") @Valid @RequestBody(required = false) Item item)
            throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /api/v1/carts/{customerId} : Delete the shopping cart
     * Deletes the shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 204)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "deleteCart", summary = "Delete the shopping cart", tags = { "cart" }, responses = {
            @ApiResponse(responseCode = "204", description = "successful operation"),
            @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
    })
    @RequestMapping(method = RequestMethod.DELETE, value = "/api/v1/carts/{customerId}")
    default ResponseEntity<Void> deleteCart(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId)
            throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /api/v1/carts/{customerId}/items/{itemId} : Delete the item from
     * shopping cart
     * Deletes the item from shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @param itemId     Item (product) Identifier (required)
     * @return Accepts the request, regardless of whether the specified item exists
     *         in the cart or not. (status code 202)
     */
    @Operation(operationId = "deleteItemFromCart", summary = "Delete the item from shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "202", description = "Accepts the request, regardless of whether the specified item exists in the cart or not.")
            })
    @RequestMapping(method = RequestMethod.DELETE, value = "/api/v1/carts/{customerId}/items/{itemId}")
    default ResponseEntity<Void> deleteItemFromCart(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId,
            @Parameter(name = "itemId", description = "Item (product) Identifier", required = true) @PathVariable("itemId") String itemId)
            throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /api/v1/carts/{customerId} : Returns the shopping cart
     * Returns the shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "getCartByCustomerId", summary = "Returns the shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = Cart.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Cart.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/api/v1/carts/{customerId}", produces = { "application/xml",
            "application/json" })
    default ResponseEntity<List<Cart>> getCartByCustomerId(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId)
            throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : \"customerId\", \"items\" : [ { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }, { \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <customerId>aeiou</customerId> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /api/v1/carts/{customerId}/items : Returns the list of products in
     * user&#39;s shopping cart
     * Returns the items in shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given customer ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "getCartItemsByCustomerId", summary = "Returns the list of products in user's shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = Item.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Given customer ID doesn't exist")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/api/v1/carts/{customerId}/items", produces = {
            "application/xml", "application/json" })
    default ResponseEntity<List<Item>> getCartItemsByCustomerId(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId)
            throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /api/v1/carts/{customerId}/items/{itemId} : Returns given item from
     * user&#39;s shopping cart
     * Returns given item from shopping cart of given customer
     *
     * @param customerId Customer Identifier (required)
     * @param itemId     Item (product) Identifier (required)
     * @return If item exists in cart (status code 200)
     *         or Given item (product) ID doesn&#39;t exist (status code 404)
     */
    @Operation(operationId = "getCartItemsByItemId", summary = "Returns given item from user's shopping cart", tags = {
            "cart" }, responses = {
                    @ApiResponse(responseCode = "200", description = "If item exists in cart", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = Item.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Given item (product) ID doesn't exist")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/api/v1/carts/{customerId}/items/{itemId}", produces = {
            "application/xml", "application/json" })
    default ResponseEntity<List<Item>> getCartItemsByItemId(
            @Parameter(name = "customerId", description = "Customer Identifier", required = true) @PathVariable("customerId") String customerId,
            @Parameter(name = "itemId", description = "Item (product) Identifier", required = true) @PathVariable("itemId") String itemId)
            throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitPrice\" : 6.027456183070403, \"quantity\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Item> <id>aeiou</id> <quantity>123</quantity> <unitPrice>3.149</unitPrice> </Item>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
