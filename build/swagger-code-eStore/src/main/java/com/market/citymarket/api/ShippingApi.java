/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.market.citymarket.api;

import com.market.citymarket.api.model.Authorization;
import com.market.citymarket.api.model.Shipment;
import com.market.citymarket.api.model.ShippingReq;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Shipping", description = "Operations about shippings")
public interface ShippingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/shipping : Return the Shipment
     * Return the Shipment for the specified order
     *
     * @param id Order Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "getShipmentByOrderId",
        summary = "Return the Shipment",
        tags = { "shipping" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Shipment.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Shipment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" }
    )
    default ResponseEntity<List<Shipment>> getShipmentByOrderId(
        @NotNull @Parameter(name = "id", description = "Order Identifier", required = true) @Valid @RequestParam(value = "id", required = true) String id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"carrier\" : \"carrier\", \"estDeliveryDate\" : \"2000-01-23\", \"orderId\" : \"orderId\", \"trackingNumber\" : \"trackingNumber\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Shipment> <orderId>aeiou</orderId> <carrier>aeiou</carrier> <trackingNumber>aeiou</trackingNumber> <estDeliveryDate>2000-01-23</estDeliveryDate> </Shipment>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/shipping : Ship the specified shipping request
     * Ship the specified shipping request
     *
     * @param shippingReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
        operationId = "shipOrder",
        summary = "Ship the specified shipping request",
        tags = { "shipping" },
        responses = {
            @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Authorization.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Authorization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/shipping",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    default ResponseEntity<Authorization> shipOrder(
        @Parameter(name = "ShippingReq", description = "") @Valid @RequestBody(required = false) ShippingReq shippingReq
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"authorized\" : true, \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"message\" : \"message\", \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Authorization> <orderId>aeiou</orderId> <time>2000-01-23T04:56:07.000Z</time> <authorized>true</authorized> <message>aeiou</message> <error>aeiou</error> </Authorization>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
